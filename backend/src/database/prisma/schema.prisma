generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Session model to group messages and character files
model User {
  id           String         @id @default(uuid())
  githubId     String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  wallets      Wallet[]
  githubData   GithubData?
  contractsData ContractsData?
  onchainData  OnchainData?
  userScore    UserScore?
  lastFetchedAt DateTime?
  dataStatus   DataStatus?
}

model Wallet {
  id              String          @id
  address         String          @unique
  chainType       String
  chainId         String
  userId          String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

} 

model GithubData {
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userInfo Json
  repos Json
  orgs Json
  languagesData Json
  status DataStatus @default(PENDING)
  lastFetchedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContractsData {
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  contracts Json
  status DataStatus @default(PENDING)
  lastFetchedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OnchainData {
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  history Json
  status DataStatus @default(PENDING)
  lastFetchedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contractStats Json
  transactionStats Json
}

model UserScore {
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalScore Float @default(0)
  metrics Json // Stores individual metric scores and calculations
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlatformConfig {
  id String @id @default(uuid())
  name String @unique
  description String?
  thresholds Json
  weights Json
  enabledChains Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DataStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

